{"version":3,"sources":["../src/ReactCloudinaryUploader.js"],"names":["ReactCloudinaryUploader","state","bytes","createdAt","etag","format","height","width","path","publicId","resourceType","secure_url","signature","tags","thumbnailUrl","type","url","version","isError","errorMessage","showPoweredBy","allowedFormats","uuid","guid","s4","Math","floor","random","toString","substring","options","cloud_name","props","cloudName","upload_preset","uploadPreset","sources","multiple","maxFiles","max_files","cropping","croppingAspectRatio","cropping_aspect_ratio","public_id","folder","length","context","contextAlt","alt","contextCaption","caption","Object","keys","setState","uploadedImage","console","log","created_at","resource_type","secureUrl","thumbnail_url","onUploadSuccess","ev","self","getUploadOptions","e","setError","Error","uploader_id","image","buttonClass","handleClick","buttonCaption","text","locale","Promise","fulfil","reject","cloudinary","openUploadWidget","error","result","event","info","Array","isArray","map","replace","returnJustUrl","Component","defaultProps","defaultSource","croppingAspectRation","maxFileSize","maxImageWidth","maxImageHeight"],"mappings":"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","file":"ReactCloudinaryUploader.js","sourcesContent":["import React, {Component} from 'react';\r\nimport { locale } from './locale';\r\n\r\nclass ReactCloudinaryUploader extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            bytes: null,\r\n            createdAt: null,\r\n            etag: null,\r\n            format: null,\r\n            height: null,\r\n            width: null,\r\n            path: null,\r\n            publicId: null,\r\n            resourceType: null,\r\n            secure_url: null,\r\n            signature: null,\r\n            tags: [],\r\n            thumbnailUrl: null,\r\n            type: null,\r\n            url: null,\r\n            version: null,\r\n            isError: false,\r\n            errorMessage: null,\r\n            showPoweredBy: false,\r\n            allowedFormats: null,\r\n            uuid: this.uuid()\r\n        };\r\n    }\r\n\r\n    static open(options) {\r\n        console.log(\"open\");\r\n        \r\n        if (!options.text) {\r\n            options.text = locale;\r\n        }\r\n        return new Promise((fulfil, reject) => {\r\n            cloudinary.openUploadWidget(options,\r\n                (error, result) => {\r\n                    if (error) {\r\n                        reject(error);\r\n                        return false;\r\n                    }\r\n                    if (!result || result.length === 0) {\r\n                        reject(new Error(\"No result from Cloudinary\"));\r\n                        return false;\r\n                    }\r\n                    if(result.event === 'success') {\r\n                        result = result.info;\r\n                        if(!Array.isArray(result)) result = [result];\r\n                        result = result.map(image => {\r\n                            image.url = `https://${image.url.replace('http://','')}`\r\n                            return image;\r\n                        });\r\n    \r\n                        if (options.returnJustUrl)\r\n                            result = result.map(image=>image.url);\r\n    \r\n                        if (!options.multiple)\r\n                            result = result[0];\r\n    \r\n                        fulfil(result);\r\n                    }\r\n                    return true;\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    uuid() {\r\n        function guid() {\r\n            function s4() {\r\n                return Math.floor((1 + Math.random()) * 0x10000)\r\n                    .toString(16)\r\n                    .substring(1);\r\n            }\r\n\r\n            return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\r\n                s4() + '-' + s4() + s4() + s4();\r\n        }\r\n\r\n        return guid();\r\n    }\r\n\r\n    getUploadOptions() {\r\n        let options = {\r\n            cloud_name: this.props.cloudName,\r\n            upload_preset: this.props.uploadPreset\r\n        };\r\n        options.sources = this.props.sources;\r\n        options.multiple = this.props.multiple;\r\n\r\n        if (this.props.maxFiles) {\r\n            options.max_files = this.props.maxFiles\r\n        }\r\n\r\n        if (this.props.cropping && this.props.cropping === 'server') {\r\n            options.cropping = this.props.cropping;\r\n        }\r\n\r\n        if (this.croppingAspectRatio) {\r\n            options.cropping_aspect_ratio = this.props.croppingAspectRatio;\r\n        }\r\n\r\n        if (this.props.publicId) {\r\n            options.public_id = this.props.publicId;\r\n        }\r\n\r\n        if (this.props.folder) {\r\n            options.folder = this.props.folder;\r\n        }\r\n\r\n        if (this.props.tags && this.props.tags.length > 0) {\r\n            options.tags = this.props.tags;\r\n        }\r\n\r\n        if (this.props.resourceType) {\r\n            options.resourceType = this.props.resourceType;\r\n        }\r\n\r\n        if (this.props.allowedFormats) {\r\n            options.allowedFormats = this.props.allowedFormats\r\n        }\r\n\r\n        let context = {};\r\n        if (this.props.contextAlt) {\r\n            context.alt = this.props.contextAlt;\r\n        }\r\n\r\n        if (this.props.contextCaption) {\r\n            context.caption = this.props.contextCaption;\r\n        }\r\n\r\n        if (Object.keys(context).length > 0) {\r\n            options.context = context;\r\n        }\r\n\r\n        return options;\r\n    }\r\n\r\n    setError(isError, errorMessage) {\r\n        this.setState({\r\n            isError: true,\r\n            errorMessage: 'No result returned from Cloudinary'\r\n        });\r\n    }\r\n\r\n    setUploadResult(uploadedImage) {\r\n        console.log(\"uploadedImage\", uploadedImage);\r\n        this.setState({\r\n            bytes: uploadedImage.bytes,\r\n            createdAt: uploadedImage.created_at,\r\n            etag: uploadedImage.etag,\r\n            format: uploadedImage.format,\r\n            height: uploadedImage.height,\r\n            path: uploadedImage.path,\r\n            publicId: uploadedImage.public_id,\r\n            resourceType: uploadedImage.resource_type,\r\n            secureUrl: uploadedImage.secure_url,\r\n            signature: uploadedImage.signature,\r\n            tags: uploadedImage.tags,\r\n            thumbnailUrl: uploadedImage.thumbnail_url,\r\n            type: uploadedImage.type,\r\n            url: uploadedImage.url,\r\n            version: uploadedImage.version,\r\n            width: uploadedImage.width\r\n        });\r\n        if (this.props.onUploadSuccess)\r\n            this.props.onUploadSuccess(uploadedImage);\r\n    }\r\n\r\n    handleClick(ev) {\r\n        let self = this;\r\n        console.log(this);\r\n        try {\r\n            let options = this.getUploadOptions();\r\n            // call promise staticaly\r\n\r\n            // cloudinary.openUploadWidget(options,\r\n            //     (error, result) => {\r\n            //         if (error) {\r\n            //             self.setError(true, error);\r\n            //             return false;\r\n            //         }\r\n            //\r\n            //         if (!result || result.length === 0) {\r\n            //             self.setError(true, 'No result from Cloudinary');\r\n            //             return false;\r\n            //         }\r\n            //         var uploadedImage = result[0];\r\n            //         self.setUploadResult(uploadedImage);\r\n            //         return true;\r\n            //     }\r\n            // );\r\n        } catch (e) {\r\n            self.setError(true, e);\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props);\r\n        if (!this.props.cloudName || !this.props.uploadPreset)\r\n            throw new Error(\"cloudName and uploadPreset props must be set\");\r\n\r\n        let uploader_id = \"uploader_\" + this.state.uuid;\r\n        let image = this.state.thumbnailUrl ? this.state.thumbnailUrl : '#';\r\n        return (\r\n            <section>\r\n                <div>\r\n                    <img src={image}/>\r\n                </div>\r\n                <a ref='uploader' id={uploader_id} href=\"#\"\r\n                   className={this.props.buttonClass}\r\n                   onClick={() => this.handleClick()}>{this.props.buttonCaption}</a>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\n// ReactCloudinaryUploader.propTypes = {\r\n//     cloudName: React.PropTypes.string.isRequired,\r\n//     uploadPreset: React.PropTypes.string.isRequired,\r\n//     showPoweredBy: React.PropTypes.bool,\r\n//     allowedFormats: React.PropTypes.array,\r\n//     maxFileSize: React.PropTypes.number,\r\n//     maxImageWidth: React.PropTypes.number,\r\n//     maxImageHeight: React.PropTypes.number,\r\n//     sources: React.PropTypes.arrayOf(React.PropTypes.string),\r\n//     defaultSource: React.PropTypes.string,\r\n//     multiple: React.PropTypes.bool,\r\n//     maxFiles: React.PropTypes.number,\r\n//     cropping: React.PropTypes.string,\r\n//     croppingAspectRatio: React.PropTypes.number,\r\n//     publicId: React.PropTypes.string,\r\n//     folder: React.PropTypes.string,\r\n//     tags: React.PropTypes.arrayOf(React.PropTypes.string),\r\n//     resourceType: React.PropTypes.string,\r\n//     contextAlt: React.PropTypes.string,\r\n//     contextCaption: React.PropTypes.string,\r\n//     buttonClass: React.PropTypes.string,\r\n//     buttonCaption: React.PropTypes.string,\r\n//     onUploadSuccess: React.PropTypes.object\r\n// };\r\n\r\nReactCloudinaryUploader.defaultProps = {\r\n    showPoweredBy: false,\r\n    sources: ['local', 'url', 'camera'],\r\n    defaultSource: 'local',\r\n    multiple: false,\r\n    maxFiles: null,\r\n    cropping: null,\r\n    croppingAspectRation: null,\r\n    publicId: null,\r\n    folder: null,\r\n    tags: null,\r\n    resourceType: 'auto',\r\n    contextAlt: null,\r\n    contextCaption: null,\r\n    allowedFormats: ['png', 'gif', 'jpeg'],\r\n    maxFileSize: null,\r\n    maxImageWidth: null,\r\n    maxImageHeight: null,\r\n    buttonClass: 'cloudinary-button',\r\n    buttonCaption: 'Upload image'\r\n};\r\n\r\nexport default ReactCloudinaryUploader;\r\n"]}